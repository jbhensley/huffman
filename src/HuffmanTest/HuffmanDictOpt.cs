using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace HuffmanTest
{
    public static class HuffmanDictOpt
    {
        public readonly struct DecodingTableEntry
        {
            public readonly uint DecodedValue;
            public readonly int BitLength;

            public DecodingTableEntry(uint decodedValue, int bitLength)
            {
                DecodedValue = decodedValue;
                BitLength = bitLength;
            }
        }

        public static readonly Dictionary<uint, DecodingTableEntry> s_decodingDictionary = new Dictionary<uint, DecodingTableEntry>(1);

        // TODO: this can be constructed from _decodingTable
        private static readonly (uint code, int bitLength)[] s_encodingTable = new (uint code, int bitLength)[]
        {
            // 0
            (0b11111111_11000000_00000000_00000000, 13),

            // 1
            (0b11111111_11111111_10110000_00000000, 23),
            (0b11111111_11111111_11111110_00100000, 28),
            (0b11111111_11111111_11111110_00110000, 28),
            (0b11111111_11111111_11111110_01000000, 28),
            (0b11111111_11111111_11111110_01010000, 28),
            (0b11111111_11111111_11111110_01100000, 28),
            (0b11111111_11111111_11111110_01110000, 28),
            (0b11111111_11111111_11111110_10000000, 28),
            (0b11111111_11111111_11101010_00000000, 24),
            (0b11111111_11111111_11111111_11110000, 30),

            // 11
            (0b11111111_11111111_11111110_10010000, 28),
            (0b11111111_11111111_11111110_10100000, 28),
            (0b11111111_11111111_11111111_11110100, 30),
            (0b11111111_11111111_11111110_10110000, 28),
            (0b11111111_11111111_11111110_11000000, 28),
            (0b11111111_11111111_11111110_11010000, 28),
            (0b11111111_11111111_11111110_11100000, 28),
            (0b11111111_11111111_11111110_11110000, 28),
            (0b11111111_11111111_11111111_00000000, 28),
            (0b11111111_11111111_11111111_00010000, 28),

            // 21
            (0b11111111_11111111_11111111_00100000, 28),
            (0b11111111_11111111_11111111_11111000, 30),
            (0b11111111_11111111_11111111_00110000, 28),
            (0b11111111_11111111_11111111_01000000, 28),
            (0b11111111_11111111_11111111_01010000, 28),
            (0b11111111_11111111_11111111_01100000, 28),
            (0b11111111_11111111_11111111_01110000, 28),
            (0b11111111_11111111_11111111_10000000, 28),
            (0b11111111_11111111_11111111_10010000, 28),
            (0b11111111_11111111_11111111_10100000, 28),

            // 31
            (0b11111111_11111111_11111111_10110000, 28),
            (0b01010000_00000000_00000000_00000000, 6),  // <space>
            (0b11111110_00000000_00000000_00000000, 10), // !
            (0b11111110_01000000_00000000_00000000, 10), // "
            (0b11111111_10100000_00000000_00000000, 12), // #
            (0b11111111_11001000_00000000_00000000, 13), // $
            (0b01010100_00000000_00000000_00000000, 6),  // %
            (0b11111000_00000000_00000000_00000000, 8),  // &
            (0b11111111_01000000_00000000_00000000, 11), // '
            (0b11111110_10000000_00000000_00000000, 10), // (

            // 41
            (0b11111110_11000000_00000000_00000000, 10), // )
            (0b11111001_00000000_00000000_00000000, 8),  // *
            (0b11111111_01100000_00000000_00000000, 11), // +
            (0b11111010_00000000_00000000_00000000, 8),  // ,
            (0b01011000_00000000_00000000_00000000, 6),  // -
            (0b01011100_00000000_00000000_00000000, 6),  // .
            (0b01100000_00000000_00000000_00000000, 6),  // /
            (0b00000000_00000000_00000000_00000000, 5),  // 0
            (0b00001000_00000000_00000000_00000000, 5),  // 1
            (0b00010000_00000000_00000000_00000000, 5),  // 2

            // 51
            (0b01100100_00000000_00000000_00000000, 6),  // 3
            (0b01101000_00000000_00000000_00000000, 6),  // 4
            (0b01101100_00000000_00000000_00000000, 6),  // 5
            (0b01110000_00000000_00000000_00000000, 6),  // 6
            (0b01110100_00000000_00000000_00000000, 6),  // 7
            (0b01111000_00000000_00000000_00000000, 6),  // 8
            (0b01111100_00000000_00000000_00000000, 6),  // 9
            (0b10111000_00000000_00000000_00000000, 7),  // :
            (0b11111011_00000000_00000000_00000000, 8),  // ;
            (0b11111111_11111000_00000000_00000000, 15), // <

            // 61
            (0b10000000_00000000_00000000_00000000, 6),  // =
            (0b11111111_10110000_00000000_00000000, 12), // >
            (0b11111111_00000000_00000000_00000000, 10), // ?
            (0b11111111_11010000_00000000_00000000, 13), // @
            (0b10000100_00000000_00000000_00000000, 6),  // A
            (0b10111010_00000000_00000000_00000000, 7),  // B
            (0b10111100_00000000_00000000_00000000, 7),  // C
            (0b10111110_00000000_00000000_00000000, 7),  // D
            (0b11000000_00000000_00000000_00000000, 7),  // E
            (0b11000010_00000000_00000000_00000000, 7),  // F
                                                         
            // 71                                        
            (0b11000100_00000000_00000000_00000000, 7),  // G
            (0b11000110_00000000_00000000_00000000, 7),  // H
            (0b11001000_00000000_00000000_00000000, 7),  // I
            (0b11001010_00000000_00000000_00000000, 7),  // J
            (0b11001100_00000000_00000000_00000000, 7),  // K
            (0b11001110_00000000_00000000_00000000, 7),  // L
            (0b11010000_00000000_00000000_00000000, 7),  // M
            (0b11010010_00000000_00000000_00000000, 7),  // N
            (0b11010100_00000000_00000000_00000000, 7),  // O
            (0b11010110_00000000_00000000_00000000, 7),  // P
                                                         
            // 81                                        
            (0b11011000_00000000_00000000_00000000, 7),  // Q
            (0b11011010_00000000_00000000_00000000, 7),  // R
            (0b11011100_00000000_00000000_00000000, 7),  // S
            (0b11011110_00000000_00000000_00000000, 7),  // T
            (0b11100000_00000000_00000000_00000000, 7),  // U
            (0b11100010_00000000_00000000_00000000, 7),  // V
            (0b11100100_00000000_00000000_00000000, 7),  // W
            (0b11111100_00000000_00000000_00000000, 8),  // X
            (0b11100110_00000000_00000000_00000000, 7),  // Y
            (0b11111101_00000000_00000000_00000000, 8),  // Z 

            // 91
            (0b11111111_11011000_00000000_00000000, 13), // [
            (0b11111111_11111110_00000000_00000000, 19), // \
            (0b11111111_11100000_00000000_00000000, 13), // ]
            (0b11111111_11110000_00000000_00000000, 14), // ^
            (0b10001000_00000000_00000000_00000000, 6),  // _
            (0b11111111_11111010_00000000_00000000, 15), // `
            (0b00011000_00000000_00000000_00000000, 5),  // a
            (0b10001100_00000000_00000000_00000000, 6),  // b
            (0b00100000_00000000_00000000_00000000, 5),  // c
            (0b10010000_00000000_00000000_00000000, 6),  // d

            // 101
            (0b00101000_00000000_00000000_00000000, 5),  // e
            (0b10010100_00000000_00000000_00000000, 6),  // f
            (0b10011000_00000000_00000000_00000000, 6),  // g
            (0b10011100_00000000_00000000_00000000, 6),  // h
            (0b00110000_00000000_00000000_00000000, 5),  // i
            (0b11101000_00000000_00000000_00000000, 7),  // j
            (0b11101010_00000000_00000000_00000000, 7),  // k
            (0b10100000_00000000_00000000_00000000, 6),  // l
            (0b10100100_00000000_00000000_00000000, 6),  // m
            (0b10101000_00000000_00000000_00000000, 6),  // n

            // 111
            (0b00111000_00000000_00000000_00000000, 5),  // o
            (0b10101100_00000000_00000000_00000000, 6),  // p
            (0b11101100_00000000_00000000_00000000, 7),  // q
            (0b10110000_00000000_00000000_00000000, 6),  // r
            (0b01000000_00000000_00000000_00000000, 5),  // s
            (0b01001000_00000000_00000000_00000000, 5),  // t
            (0b10110100_00000000_00000000_00000000, 6),  // u
            (0b11101110_00000000_00000000_00000000, 7),  // v
            (0b11110000_00000000_00000000_00000000, 7),  // w
            (0b11110010_00000000_00000000_00000000, 7),  // x

            // 121
            (0b11110100_00000000_00000000_00000000, 7),  // y
            (0b11110110_00000000_00000000_00000000, 7),  // z
            (0b11111111_11111100_00000000_00000000, 15), // {
            (0b11111111_10000000_00000000_00000000, 11), // |
            (0b11111111_11110100_00000000_00000000, 14), // }
            (0b11111111_11101000_00000000_00000000, 13), // ~
            (0b11111111_11111111_11111111_11000000, 28),
            (0b11111111_11111110_01100000_00000000, 20),
            (0b11111111_11111111_01001000_00000000, 22),
            (0b11111111_11111110_01110000_00000000, 20),

            // 131
            (0b11111111_11111110_10000000_00000000, 20),
            (0b11111111_11111111_01001100_00000000, 22),
            (0b11111111_11111111_01010000_00000000, 22),
            (0b11111111_11111111_01010100_00000000, 22),
            (0b11111111_11111111_10110010_00000000, 23),
            (0b11111111_11111111_01011000_00000000, 22),
            (0b11111111_11111111_10110100_00000000, 23),
            (0b11111111_11111111_10110110_00000000, 23),
            (0b11111111_11111111_10111000_00000000, 23),
            (0b11111111_11111111_10111010_00000000, 23),

            // 141
            (0b11111111_11111111_10111100_00000000, 23),
            (0b11111111_11111111_11101011_00000000, 24),
            (0b11111111_11111111_10111110_00000000, 23),
            (0b11111111_11111111_11101100_00000000, 24),
            (0b11111111_11111111_11101101_00000000, 24),
            (0b11111111_11111111_01011100_00000000, 22),
            (0b11111111_11111111_11000000_00000000, 23),
            (0b11111111_11111111_11101110_00000000, 24),
            (0b11111111_11111111_11000010_00000000, 23),
            (0b11111111_11111111_11000100_00000000, 23),

            // 151
            (0b11111111_11111111_11000110_00000000, 23),
            (0b11111111_11111111_11001000_00000000, 23),
            (0b11111111_11111110_11100000_00000000, 21),
            (0b11111111_11111111_01100000_00000000, 22),
            (0b11111111_11111111_11001010_00000000, 23),
            (0b11111111_11111111_01100100_00000000, 22),
            (0b11111111_11111111_11001100_00000000, 23),
            (0b11111111_11111111_11001110_00000000, 23),
            (0b11111111_11111111_11101111_00000000, 24),
            (0b11111111_11111111_01101000_00000000, 22),

            // 161
            (0b11111111_11111110_11101000_00000000, 21),
            (0b11111111_11111110_10010000_00000000, 20),
            (0b11111111_11111111_01101100_00000000, 22),
            (0b11111111_11111111_01110000_00000000, 22),
            (0b11111111_11111111_11010000_00000000, 23),
            (0b11111111_11111111_11010010_00000000, 23),
            (0b11111111_11111110_11110000_00000000, 21),
            (0b11111111_11111111_11010100_00000000, 23),
            (0b11111111_11111111_01110100_00000000, 22),
            (0b11111111_11111111_01111000_00000000, 22),

            // 171
            (0b11111111_11111111_11110000_00000000, 24),
            (0b11111111_11111110_11111000_00000000, 21),
            (0b11111111_11111111_01111100_00000000, 22),
            (0b11111111_11111111_11010110_00000000, 23),
            (0b11111111_11111111_11011000_00000000, 23),
            (0b11111111_11111111_00000000_00000000, 21),
            (0b11111111_11111111_00001000_00000000, 21),
            (0b11111111_11111111_10000000_00000000, 22),
            (0b11111111_11111111_00010000_00000000, 21),
            (0b11111111_11111111_11011010_00000000, 23),

            // 181
            (0b11111111_11111111_10000100_00000000, 22),
            (0b11111111_11111111_11011100_00000000, 23),
            (0b11111111_11111111_11011110_00000000, 23),
            (0b11111111_11111110_10100000_00000000, 20),
            (0b11111111_11111111_10001000_00000000, 22),
            (0b11111111_11111111_10001100_00000000, 22),
            (0b11111111_11111111_10010000_00000000, 22),
            (0b11111111_11111111_11100000_00000000, 23),
            (0b11111111_11111111_10010100_00000000, 22),
            (0b11111111_11111111_10011000_00000000, 22),

            // 191
            (0b11111111_11111111_11100010_00000000, 23),
            (0b11111111_11111111_11111000_00000000, 26),
            (0b11111111_11111111_11111000_01000000, 26),
            (0b11111111_11111110_10110000_00000000, 20),
            (0b11111111_11111110_00100000_00000000, 19),
            (0b11111111_11111111_10011100_00000000, 22),
            (0b11111111_11111111_11100100_00000000, 23),
            (0b11111111_11111111_10100000_00000000, 22),
            (0b11111111_11111111_11110110_00000000, 25),
            (0b11111111_11111111_11111000_10000000, 26),

            // 201
            (0b11111111_11111111_11111000_11000000, 26),
            (0b11111111_11111111_11111001_00000000, 26),
            (0b11111111_11111111_11111011_11000000, 27),
            (0b11111111_11111111_11111011_11100000, 27),
            (0b11111111_11111111_11111001_01000000, 26),
            (0b11111111_11111111_11110001_00000000, 24),
            (0b11111111_11111111_11110110_10000000, 25),
            (0b11111111_11111110_01000000_00000000, 19),
            (0b11111111_11111111_00011000_00000000, 21),
            (0b11111111_11111111_11111001_10000000, 26),

            // 211
            (0b11111111_11111111_11111100_00000000, 27),
            (0b11111111_11111111_11111100_00100000, 27),
            (0b11111111_11111111_11111001_11000000, 26),
            (0b11111111_11111111_11111100_01000000, 27),
            (0b11111111_11111111_11110010_00000000, 24),
            (0b11111111_11111111_00100000_00000000, 21),
            (0b11111111_11111111_00101000_00000000, 21),
            (0b11111111_11111111_11111010_00000000, 26),
            (0b11111111_11111111_11111010_01000000, 26),
            (0b11111111_11111111_11111111_11010000, 28),

            // 221
            (0b11111111_11111111_11111100_01100000, 27),
            (0b11111111_11111111_11111100_10000000, 27),
            (0b11111111_11111111_11111100_10100000, 27),
            (0b11111111_11111110_11000000_00000000, 20),
            (0b11111111_11111111_11110011_00000000, 24),
            (0b11111111_11111110_11010000_00000000, 20),
            (0b11111111_11111111_00110000_00000000, 21),
            (0b11111111_11111111_10100100_00000000, 22),
            (0b11111111_11111111_00111000_00000000, 21),
            (0b11111111_11111111_01000000_00000000, 21),

            // 231
            (0b11111111_11111111_11100110_00000000, 23),
            (0b11111111_11111111_10101000_00000000, 22),
            (0b11111111_11111111_10101100_00000000, 22),
            (0b11111111_11111111_11110111_00000000, 25),
            (0b11111111_11111111_11110111_10000000, 25),
            (0b11111111_11111111_11110100_00000000, 24),
            (0b11111111_11111111_11110101_00000000, 24),
            (0b11111111_11111111_11111010_10000000, 26),
            (0b11111111_11111111_11101000_00000000, 23),
            (0b11111111_11111111_11111010_11000000, 26),

            // 241
            (0b11111111_11111111_11111100_11000000, 27),
            (0b11111111_11111111_11111011_00000000, 26),
            (0b11111111_11111111_11111011_01000000, 26),
            (0b11111111_11111111_11111100_11100000, 27),
            (0b11111111_11111111_11111101_00000000, 27),
            (0b11111111_11111111_11111101_00100000, 27),
            (0b11111111_11111111_11111101_01000000, 27),
            (0b11111111_11111111_11111101_01100000, 27),
            (0b11111111_11111111_11111111_11100000, 28),
            (0b11111111_11111111_11111101_10000000, 27),

            // 251
            (0b11111111_11111111_11111101_10100000, 27),
            (0b11111111_11111111_11111101_11000000, 27),
            (0b11111111_11111111_11111101_11100000, 27),
            (0b11111111_11111111_11111110_00000000, 27),
            (0b11111111_11111111_11111011_10000000, 26),

            // 256
            (0b11111111_11111111_11111111_11111100, 30)
        };

        public static (uint encoded, int bitLength) Encode(int data) => s_encodingTable[data];

        /// <summary>
        /// Decodes a Huffman encoded string from a byte array.
        /// </summary>
        /// <param name="src">The source byte array containing the encoded data.</param>
        /// <param name="offset">The offset in the byte array where the coded data starts.</param>
        /// <param name="count">The number of bytes to decode.</param>
        /// <param name="dst">The destination byte array to store the decoded data.</param>
        /// <returns>The number of decoded symbols.</returns>
        public static int Decode(byte[] src, int offset, int count, byte[] dst)
        {
            var i = offset;
            var j = 0;
            var lastDecodedBits = 0;
            var edgeIndex = count - 1;

            while (i <= edgeIndex)
            {
                var next = (uint)(src[i] << 24 + lastDecodedBits);
                if (i + 1 < src.Length)
                {
                    next |= (uint)(src[i + 1] << 16 + lastDecodedBits);

                    if (i + 2 < src.Length)
                    {
                        next |= (uint)(src[i + 2] << 8 + lastDecodedBits);

                        if (i + 3 < src.Length)
                        {
                            next |= (uint)(src[i + 3] << lastDecodedBits);

                            if (i + 4 < src.Length)
                            {
                                next |= (uint)(src[i + 4] >> (8 - lastDecodedBits));
                            }
                        }
                    }
                }

                var remainingBits = 8 - lastDecodedBits;

                // The remaining 7 or less bits are all 1, which is padding.
                // We specifically check that lastDecodedBits > 0 because padding
                // longer than 7 bits should be treated as a decoding error.
                // http://httpwg.org/specs/rfc7541.html#rfc.section.5.2
                if (i == edgeIndex && lastDecodedBits > 0)
                {
                    var ones = (uint)(int.MinValue >> remainingBits - 1);

                    if ((next & ones) == ones)
                        break;
                }

                if (j == dst.Length)
                {
                    // Destination is too small.
                    throw new HuffmanDecodingException();
                }

                // The longest possible symbol size is 30 bits. If we're at the last 4 bytes
                // of the input, we need to make sure we pass the correct number of valid bits
                // left, otherwise the trailing 0s in next may form a valid symbol.
                var validBits = remainingBits + (edgeIndex - i) * 8;
                if (validBits > 30)
                    validBits = 30; // Equivalent to Math.Min(30, validBits)

                var ch = DecodeImpl(s_decodingDictionary, next, validBits, out var decodedBits);

                if (ch == -1 || ch == 256)
                {
                    // -1: No valid symbol could be decoded with the bits in next.

                    // 256: A Huffman-encoded string literal containing the EOS symbol MUST be treated as a decoding error.
                    // http://httpwg.org/specs/rfc7541.html#rfc.section.5.2
                    throw new HuffmanDecodingException();
                }

                dst[j++] = (byte)ch;

                // If we crossed a byte boundary, advance i so we start at the next byte that's not fully decoded.
                lastDecodedBits += decodedBits;
                i += lastDecodedBits / 8;

                // Modulo 8 since we only care about how many bits were decoded in the last byte that we processed.
                lastDecodedBits %= 8;
            }

            return j;
        }

        public static int Decode(uint data, int validBits, out int decodedBits)
            => DecodeImpl(s_decodingDictionary, data, validBits, out decodedBits);

        //[MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static int DecodeImpl(in Dictionary<uint, DecodingTableEntry> dict, in uint data, in int validBits, out int decodedBits)
        {
            int byteNumber = 3;                      // grab the most significant byte
            uint virtualDictionaryMask = 0;          // used to key into different "virtual" dictionaries
            DecodingTableEntry entry;
            do
            {
                // extract the working byte
                uint workingByte = data >> (byteNumber * 8) & 0xFF;

                // apply virtual dictionary bitmask
                if (virtualDictionaryMask > 0)
                    workingByte |= virtualDictionaryMask;

                // key into the dictionary
                if (!dict.TryGetValue(workingByte, out entry))
                    break;  // we should either get an entry or bitmask for the next virtual dictionary. if we get neither then
                            // the bit pattern is not consistent with any entry we have

                // if we get a length back then we have found the decoded value
                if (entry.BitLength > 0)
                {
                    if (entry.BitLength > validBits)
                        break;  // we only found a value by incorporating bits beyond the the valid remaining length of the data stream

                    decodedBits = entry.BitLength;
                    return (int)entry.DecodedValue;
                }
                // otherwise, we have found a mask that lets us key into the next virtual dictionary
                else
                {
                    virtualDictionaryMask = entry.DecodedValue;
                    byteNumber--;
                }

            } while (entry.BitLength == 0);

            // no luck. signal to caller that we could not decode
            decodedBits = 0;
            return -1;
        }
    }
}
